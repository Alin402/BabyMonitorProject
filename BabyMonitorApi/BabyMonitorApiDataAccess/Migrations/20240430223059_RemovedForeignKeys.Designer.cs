// <auto-generated />
using System;
using BabyMonitorApiDataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BabyMonitorApiDataAccess.Migrations
{
    [DbContext(typeof(BabyMonitorContext))]
    [Migration("20240430223059_RemovedForeignKeys")]
    partial class RemovedForeignKeys
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BabyMonitorApiDataAccess.Entities.ApiKey", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("api_keys", (string)null);
                });

            modelBuilder.Entity("BabyMonitorApiDataAccess.Entities.Baby", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("BirthDate")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PhotoUrl")
                        .HasColumnType("nvarchar(300)");

                    b.Property<Guid?>("UserId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("babies", (string)null);
                });

            modelBuilder.Entity("BabyMonitorApiDataAccess.Entities.BabyState", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double?>("AtSecond")
                        .IsRequired()
                        .HasColumnType("float");

                    b.Property<bool>("Awake")
                        .HasColumnType("bit");

                    b.Property<string>("Emotion")
                        .IsRequired()
                        .HasColumnType("nvarchar(10)");

                    b.Property<Guid?>("LivestreamId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("LivestreamId");

                    b.ToTable("baby_state", (string)null);
                });

            modelBuilder.Entity("BabyMonitorApiDataAccess.Entities.FactoryMonitoringDevice", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("factorymonitoringdevice", (string)null);
                });

            modelBuilder.Entity("BabyMonitorApiDataAccess.Entities.Livestream", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("BabyId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DateStarted")
                        .HasColumnType("datetime2");

                    b.Property<double?>("Time")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("BabyId");

                    b.ToTable("livestream", (string)null);
                });

            modelBuilder.Entity("BabyMonitorApiDataAccess.Entities.MonitoringDevice", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("BabyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LivestreamUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("UserId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("monitoring_devices", (string)null);
                });

            modelBuilder.Entity("BabyMonitorApiDataAccess.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("BabyMonitorApiDataAccess.Entities.Baby", b =>
                {
                    b.HasOne("BabyMonitorApiDataAccess.Entities.User", "_User")
                        .WithMany("Babies")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("_User");
                });

            modelBuilder.Entity("BabyMonitorApiDataAccess.Entities.BabyState", b =>
                {
                    b.HasOne("BabyMonitorApiDataAccess.Entities.Livestream", "_Livestream")
                        .WithMany("BabyStates")
                        .HasForeignKey("LivestreamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("_Livestream");
                });

            modelBuilder.Entity("BabyMonitorApiDataAccess.Entities.Livestream", b =>
                {
                    b.HasOne("BabyMonitorApiDataAccess.Entities.Baby", "_Baby")
                        .WithMany("Livestreams")
                        .HasForeignKey("BabyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("_Baby");
                });

            modelBuilder.Entity("BabyMonitorApiDataAccess.Entities.MonitoringDevice", b =>
                {
                    b.HasOne("BabyMonitorApiDataAccess.Entities.User", "_User")
                        .WithMany("MonitoringDevices")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("_User");
                });

            modelBuilder.Entity("BabyMonitorApiDataAccess.Entities.Baby", b =>
                {
                    b.Navigation("Livestreams");
                });

            modelBuilder.Entity("BabyMonitorApiDataAccess.Entities.Livestream", b =>
                {
                    b.Navigation("BabyStates");
                });

            modelBuilder.Entity("BabyMonitorApiDataAccess.Entities.User", b =>
                {
                    b.Navigation("Babies");

                    b.Navigation("MonitoringDevices");
                });
#pragma warning restore 612, 618
        }
    }
}
